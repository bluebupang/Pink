package com.ssy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ssy.greendao.StringConverter;
import java.util.List;

import com.ssy.pink.bean.weibo.WeiboLoginInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIBO_LOGIN_INFO".
*/
public class WeiboLoginInfoDao extends AbstractDao<WeiboLoginInfo, String> {

    public static final String TABLENAME = "WEIBO_LOGIN_INFO";

    /**
     * Properties of entity WeiboLoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Retcode = new Property(0, String.class, "retcode", false, "RETCODE");
        public final static Property Ticket = new Property(1, String.class, "ticket", false, "TICKET");
        public final static Property Uid = new Property(2, String.class, "uid", true, "UID");
        public final static Property Nick = new Property(3, String.class, "nick", false, "NICK");
        public final static Property CrossDomainUrlList = new Property(4, String.class, "crossDomainUrlList", false, "CROSS_DOMAIN_URL_LIST");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
    }

    private final StringConverter crossDomainUrlListConverter = new StringConverter();

    public WeiboLoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WeiboLoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIBO_LOGIN_INFO\" (" + //
                "\"RETCODE\" TEXT," + // 0: retcode
                "\"TICKET\" TEXT," + // 1: ticket
                "\"UID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 2: uid
                "\"NICK\" TEXT," + // 3: nick
                "\"CROSS_DOMAIN_URL_LIST\" TEXT," + // 4: crossDomainUrlList
                "\"REASON\" TEXT);"); // 5: reason
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIBO_LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeiboLoginInfo entity) {
        stmt.clearBindings();
 
        String retcode = entity.getRetcode();
        if (retcode != null) {
            stmt.bindString(1, retcode);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(2, ticket);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(4, nick);
        }
 
        List crossDomainUrlList = entity.getCrossDomainUrlList();
        if (crossDomainUrlList != null) {
            stmt.bindString(5, crossDomainUrlListConverter.convertToDatabaseValue(crossDomainUrlList));
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeiboLoginInfo entity) {
        stmt.clearBindings();
 
        String retcode = entity.getRetcode();
        if (retcode != null) {
            stmt.bindString(1, retcode);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(2, ticket);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(4, nick);
        }
 
        List crossDomainUrlList = entity.getCrossDomainUrlList();
        if (crossDomainUrlList != null) {
            stmt.bindString(5, crossDomainUrlListConverter.convertToDatabaseValue(crossDomainUrlList));
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public WeiboLoginInfo readEntity(Cursor cursor, int offset) {
        WeiboLoginInfo entity = new WeiboLoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // retcode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ticket
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick
            cursor.isNull(offset + 4) ? null : crossDomainUrlListConverter.convertToEntityProperty(cursor.getString(offset + 4)), // crossDomainUrlList
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // reason
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeiboLoginInfo entity, int offset) {
        entity.setRetcode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTicket(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCrossDomainUrlList(cursor.isNull(offset + 4) ? null : crossDomainUrlListConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WeiboLoginInfo entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(WeiboLoginInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeiboLoginInfo entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
