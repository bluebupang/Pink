package com.ssy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ssy.pink.bean.weibo.WeiboTokenInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIBO_TOKEN_INFO".
*/
public class WeiboTokenInfoDao extends AbstractDao<WeiboTokenInfo, String> {

    public static final String TABLENAME = "WEIBO_TOKEN_INFO";

    /**
     * Properties of entity WeiboTokenInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WeiboUid = new Property(0, String.class, "weiboUid", true, "WEIBO_UID");
        public final static Property MAccessToken = new Property(1, String.class, "mAccessToken", false, "M_ACCESS_TOKEN");
        public final static Property MRefreshToken = new Property(2, String.class, "mRefreshToken", false, "M_REFRESH_TOKEN");
        public final static Property MExpiresTime = new Property(3, long.class, "mExpiresTime", false, "M_EXPIRES_TIME");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
    }


    public WeiboTokenInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WeiboTokenInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIBO_TOKEN_INFO\" (" + //
                "\"WEIBO_UID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: weiboUid
                "\"M_ACCESS_TOKEN\" TEXT," + // 1: mAccessToken
                "\"M_REFRESH_TOKEN\" TEXT," + // 2: mRefreshToken
                "\"M_EXPIRES_TIME\" INTEGER NOT NULL ," + // 3: mExpiresTime
                "\"TYPE\" INTEGER NOT NULL );"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIBO_TOKEN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeiboTokenInfo entity) {
        stmt.clearBindings();
 
        String weiboUid = entity.getWeiboUid();
        if (weiboUid != null) {
            stmt.bindString(1, weiboUid);
        }
 
        String mAccessToken = entity.getMAccessToken();
        if (mAccessToken != null) {
            stmt.bindString(2, mAccessToken);
        }
 
        String mRefreshToken = entity.getMRefreshToken();
        if (mRefreshToken != null) {
            stmt.bindString(3, mRefreshToken);
        }
        stmt.bindLong(4, entity.getMExpiresTime());
        stmt.bindLong(5, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeiboTokenInfo entity) {
        stmt.clearBindings();
 
        String weiboUid = entity.getWeiboUid();
        if (weiboUid != null) {
            stmt.bindString(1, weiboUid);
        }
 
        String mAccessToken = entity.getMAccessToken();
        if (mAccessToken != null) {
            stmt.bindString(2, mAccessToken);
        }
 
        String mRefreshToken = entity.getMRefreshToken();
        if (mRefreshToken != null) {
            stmt.bindString(3, mRefreshToken);
        }
        stmt.bindLong(4, entity.getMExpiresTime());
        stmt.bindLong(5, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WeiboTokenInfo readEntity(Cursor cursor, int offset) {
        WeiboTokenInfo entity = new WeiboTokenInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // weiboUid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mAccessToken
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mRefreshToken
            cursor.getLong(offset + 3), // mExpiresTime
            cursor.getInt(offset + 4) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeiboTokenInfo entity, int offset) {
        entity.setWeiboUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMAccessToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMRefreshToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMExpiresTime(cursor.getLong(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WeiboTokenInfo entity, long rowId) {
        return entity.getWeiboUid();
    }
    
    @Override
    public String getKey(WeiboTokenInfo entity) {
        if(entity != null) {
            return entity.getWeiboUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeiboTokenInfo entity) {
        return entity.getWeiboUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
