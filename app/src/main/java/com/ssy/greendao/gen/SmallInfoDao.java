package com.ssy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ssy.pink.bean.SmallInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMALL_INFO".
*/
public class SmallInfoDao extends AbstractDao<SmallInfo, String> {

    public static final String TABLENAME = "SMALL_INFO";

    /**
     * Properties of entity SmallInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CustomerNum = new Property(0, String.class, "customerNum", false, "CUSTOMER_NUM");
        public final static Property CustomerGroupNum = new Property(1, String.class, "customerGroupNum", false, "CUSTOMER_GROUP_NUM");
        public final static Property CustomerGroupName = new Property(2, String.class, "customerGroupName", false, "CUSTOMER_GROUP_NAME");
        public final static Property SmallWeiboNum = new Property(3, String.class, "smallWeiboNum", false, "SMALL_WEIBO_NUM");
        public final static Property Usepwd = new Property(4, String.class, "usepwd", false, "USEPWD");
        public final static Property SmallWeiboName = new Property(5, String.class, "smallWeiboName", false, "SMALL_WEIBO_NAME");
        public final static Property WeibosmallNumId = new Property(6, String.class, "weibosmallNumId", true, "WEIBOSMALL_NUM_ID");
        public final static Property SmallNumFansOrgInfoName = new Property(7, String.class, "smallNumFansOrgInfoName", false, "SMALL_NUM_FANS_ORG_INFO_NAME");
        public final static Property SmallNumFansOrgInfoNum = new Property(8, String.class, "smallNumFansOrgInfoNum", false, "SMALL_NUM_FANS_ORG_INFO_NUM");
        public final static Property SmallNumStatus = new Property(9, String.class, "smallNumStatus", false, "SMALL_NUM_STATUS");
    }


    public SmallInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SmallInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMALL_INFO\" (" + //
                "\"CUSTOMER_NUM\" TEXT," + // 0: customerNum
                "\"CUSTOMER_GROUP_NUM\" TEXT," + // 1: customerGroupNum
                "\"CUSTOMER_GROUP_NAME\" TEXT," + // 2: customerGroupName
                "\"SMALL_WEIBO_NUM\" TEXT," + // 3: smallWeiboNum
                "\"USEPWD\" TEXT," + // 4: usepwd
                "\"SMALL_WEIBO_NAME\" TEXT," + // 5: smallWeiboName
                "\"WEIBOSMALL_NUM_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 6: weibosmallNumId
                "\"SMALL_NUM_FANS_ORG_INFO_NAME\" TEXT," + // 7: smallNumFansOrgInfoName
                "\"SMALL_NUM_FANS_ORG_INFO_NUM\" TEXT," + // 8: smallNumFansOrgInfoNum
                "\"SMALL_NUM_STATUS\" TEXT);"); // 9: smallNumStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMALL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallInfo entity) {
        stmt.clearBindings();
 
        String customerNum = entity.getCustomerNum();
        if (customerNum != null) {
            stmt.bindString(1, customerNum);
        }
 
        String customerGroupNum = entity.getCustomerGroupNum();
        if (customerGroupNum != null) {
            stmt.bindString(2, customerGroupNum);
        }
 
        String customerGroupName = entity.getCustomerGroupName();
        if (customerGroupName != null) {
            stmt.bindString(3, customerGroupName);
        }
 
        String smallWeiboNum = entity.getSmallWeiboNum();
        if (smallWeiboNum != null) {
            stmt.bindString(4, smallWeiboNum);
        }
 
        String usepwd = entity.getUsepwd();
        if (usepwd != null) {
            stmt.bindString(5, usepwd);
        }
 
        String smallWeiboName = entity.getSmallWeiboName();
        if (smallWeiboName != null) {
            stmt.bindString(6, smallWeiboName);
        }
 
        String weibosmallNumId = entity.getWeibosmallNumId();
        if (weibosmallNumId != null) {
            stmt.bindString(7, weibosmallNumId);
        }
 
        String smallNumFansOrgInfoName = entity.getSmallNumFansOrgInfoName();
        if (smallNumFansOrgInfoName != null) {
            stmt.bindString(8, smallNumFansOrgInfoName);
        }
 
        String smallNumFansOrgInfoNum = entity.getSmallNumFansOrgInfoNum();
        if (smallNumFansOrgInfoNum != null) {
            stmt.bindString(9, smallNumFansOrgInfoNum);
        }
 
        String smallNumStatus = entity.getSmallNumStatus();
        if (smallNumStatus != null) {
            stmt.bindString(10, smallNumStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallInfo entity) {
        stmt.clearBindings();
 
        String customerNum = entity.getCustomerNum();
        if (customerNum != null) {
            stmt.bindString(1, customerNum);
        }
 
        String customerGroupNum = entity.getCustomerGroupNum();
        if (customerGroupNum != null) {
            stmt.bindString(2, customerGroupNum);
        }
 
        String customerGroupName = entity.getCustomerGroupName();
        if (customerGroupName != null) {
            stmt.bindString(3, customerGroupName);
        }
 
        String smallWeiboNum = entity.getSmallWeiboNum();
        if (smallWeiboNum != null) {
            stmt.bindString(4, smallWeiboNum);
        }
 
        String usepwd = entity.getUsepwd();
        if (usepwd != null) {
            stmt.bindString(5, usepwd);
        }
 
        String smallWeiboName = entity.getSmallWeiboName();
        if (smallWeiboName != null) {
            stmt.bindString(6, smallWeiboName);
        }
 
        String weibosmallNumId = entity.getWeibosmallNumId();
        if (weibosmallNumId != null) {
            stmt.bindString(7, weibosmallNumId);
        }
 
        String smallNumFansOrgInfoName = entity.getSmallNumFansOrgInfoName();
        if (smallNumFansOrgInfoName != null) {
            stmt.bindString(8, smallNumFansOrgInfoName);
        }
 
        String smallNumFansOrgInfoNum = entity.getSmallNumFansOrgInfoNum();
        if (smallNumFansOrgInfoNum != null) {
            stmt.bindString(9, smallNumFansOrgInfoNum);
        }
 
        String smallNumStatus = entity.getSmallNumStatus();
        if (smallNumStatus != null) {
            stmt.bindString(10, smallNumStatus);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    @Override
    public SmallInfo readEntity(Cursor cursor, int offset) {
        SmallInfo entity = new SmallInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // customerNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customerGroupNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerGroupName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // smallWeiboNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usepwd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // smallWeiboName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weibosmallNumId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // smallNumFansOrgInfoName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // smallNumFansOrgInfoNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // smallNumStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallInfo entity, int offset) {
        entity.setCustomerNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCustomerGroupNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmallWeiboNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsepwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSmallWeiboName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeibosmallNumId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSmallNumFansOrgInfoName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSmallNumFansOrgInfoNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSmallNumStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SmallInfo entity, long rowId) {
        return entity.getWeibosmallNumId();
    }
    
    @Override
    public String getKey(SmallInfo entity) {
        if(entity != null) {
            return entity.getWeibosmallNumId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallInfo entity) {
        return entity.getWeibosmallNumId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
